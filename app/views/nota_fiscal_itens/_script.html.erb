<script>
  // =============== Adicionar e Calcular Produtos ===============
  $(document).ready(function() {
    $(window).keydown(function(event){
      if(event.keyCode == 13) {
        event.preventDefault();
        return false;
      }
    });

    addProduto()
    getMovimentos()
  });

  $(document).on('click keyup', '[data-behavior~=cod_produto]', function(event) {
    const number_tr = parseInt(event.target.id.match(/\d+/)[0])
    const val = parseInt($(`#${number_tr}-cod_produto`).val())
    $(`#${number_tr}-descricao`).select2("val", `${val}`)

    atualizaProduto(event, false)
  });

  $(document).on('click keyup', '[data-behavior~=qtd]', function(event) {
    const number_tr = parseInt(event.target.id.match(/\d+/)[0])
    const preco_unitario = parseFloat($(`#${number_tr}-preco_unitario`).val().replace('R$', '').replace(',', '.'))
    const qtd = parseFloat($(`#${number_tr}-qtd`).val())
    const total = qtd * preco_unitario

    if(!total) return
    $(`#${number_tr}-preco_total`).val(`R$ ${formatarValorRetornado(total)}`)

    calculoValorTotal()
  });

  $(document).on('keyup', '[data-behavior~=delete]', function(event) {
    const number_tr = parseInt(event.target.id.match(/\d+/)[0])
    const nextId = number_tr + 1
    const cod_produto_next = $(`#${nextId}-cod_produto`).val()

    if(!cod_produto_next && cod_produto_next == null && cod_produto_next != ""){
      if(event.keyCode == 9) {
        addProduto()
      }
    }
  });

  $(document).on('change', '[data-behavior~=descricao]', function(event) {
    atualizaProduto(event)
  });

  $(".js-example-matcher").select2({
    matcher: matchCustom
  });

  const addProduto = () => {
    var clica = setInterval(function(){
      clearInterval(clica);
      var table = $('.jsDinamicTable_nota_fiscal_id_<%= @nota_fiscal.id %>');
      var body = $('#tableBody_nota_fiscal_id_<%= @nota_fiscal.id %>');
      var nextId = body.find('tr').length + 1;
      table.append(
        $(
        "<tr id='"+nextId+"' class='operacao'>"+
          "<td>"+nextId+"</td>"+
          "<td><input  class='form-control' id='"+nextId+"-cod_produto' type='text' name='nota_fiscal[nota_fiscal_item][][cod_produto]' style='width: 55px;' data-behavior='cod_produto'></td>" +
          "<td><select class='form-control form-produtos-itens js-example-matcher' id='"+nextId+"-descricao' name='nota_fiscal_item[descricao]'  data-behavior='descricao' id='nota_fiscal_item_descricao'></select></td>" +
          "<td><input  class='form-control' id='"+nextId+"-ncm' type='text' name='nota_fiscal[nota_fiscal_item][][ncm]' readonly ></td>" +
          "<td><input  class='form-control' id='"+nextId+"-un' type='text' name='nota_fiscal[nota_fiscal_item][][un]' style='width: 70px;' readonly ></td>" +
          "<td><input  class='form-control' id='"+nextId+"-qtd' type='number' name='nota_fiscal[nota_fiscal_item][][qtd]' style='width: 70px;' data-behavior='qtd' min='0'></td>" +
          "<td><input  class='form-control' id='"+nextId+"-preco_unitario' type='text' name='nota_fiscal[nota_fiscal_item][][preco_unitario]' style='width: 95px;' readonly data-behavior='preco_unitario'></td>" +
          "<td><input  class='form-control' id='"+nextId+"-preco_total' type='text' name='nota_fiscal[nota_fiscal_item][][preco_total]' style='width: 110px;' readonly data-behavior='preco_total'></td>" +
          "<td><button type='button' id='"+nextId+"-delete' data-behavior='delete' class='btn btn-danger delete'>x</button></td>" +
        "</tr>"
        )
      );

      $(`#${nextId}-descricao`).append(`<option value=""></option>`);
      <% @produtos.each do |produto| %>
        $(`#${nextId}-descricao`).append(`<option value="<%= produto.id %>"><%= produto.descricao %></option>`);
      <% end %>

      $(`#${nextId}-cod_produto`).parent().find(".tabledit-edit-button").trigger("click");
      $(".js-example-matcher").select2({ matcher: matchCustom });

      $("#myModal").hide()
        calculoValorTotal()
    }, 100);
  }

  const atualizaProduto = (event, setCode = null) => {
    const number_tr = parseInt(event.target.id.match(/\d+/)[0])
    const produto_id = $(`#${number_tr}-descricao`).val()
    if(!produto_id) return

    if(setCode === null) $(`#${number_tr}-cod_produto`).val(`${produto_id}`)
    const produto = getProduto(produto_id)
    if(!produto) return

    $(`#${number_tr}-ncm`).val(produto.ncm);
    $(`#${number_tr}-un`).val(produto.unidade);
    $(`#${number_tr}-qtd`).val("");
    $(`#${number_tr}-preco_unitario`).val("R$ " + formatarValorRetornado(produto.preco_venda));
    $(`#${number_tr}-preco_total`).val("");

    calculoValorTotal()
  }

  const calculoValorTotal = () => {
    let valorTotal = 0
    $("input[data-behavior~=preco_total]").each(function(){
      try {
        var input = $(this);
        var valor = input.val().replace('.', '').replace(/,/g, ".").replace('R$', '')
        if(valor) valorTotal += parseFloat(valor)
      }catch(error){}
    });

    $(`.valor-total`).html(`R$ ${formatarValorRetornado(valorTotal)}`);
    $("#loader").hide()
    $(".table-nota").show()
  }

  const formatarValorRetornado = (valor) => {
    valor = valor.toFixed(2);
    return valor.toString().replace(".", ",")
  }

  $('body').on('click', '.delete', function() {
    const $tr = $(this).closest('tr');
    $tr.remove();

    removerItemEstoqueLocal()
    calculoValorTotal()
  });

  const removerItemEstoqueLocal = () => {
    const number_tr = this.id.match(/\d+/)[0]
    const produto_id = $(`#${number_tr}-cod_produto`).val()
    const movimentoEstoques = getMovimentoEstoque()
    if(!movimentoEstoques) return

    let indices_removidos = []
    for (let index = 0; index < movimentoEstoques.length; index++) {
      const movimento = movimentoEstoques[index];
      if(movimento.produto_id == produto_id){
        indices_removidos.push(index)
      }
    }

    indices_removidos.reverse().map(function(index) {
      movimentoEstoques.splice(index, 1)
    });

    setMovimentoEstoque(movimentoEstoques)
  }

  // =============== Atualizar Estoque ===============
  var span = document.getElementsByClassName("close")[0];
  span.onclick = function() {
    $("#myModal").hide()
  }

  $(document).on('blur', '[data-behavior~=qtd]', function(event) {
    const number_tr = parseInt(event.target.id.match(/\d+/)[0])
    const produto_id = $(`#${number_tr}-cod_produto`).val()
    abrirEstoques(produto_id, number_tr)
  });

  $(document).on('keyup', '[data-behavior~=qtd_venda]', function(event) {
    const estoque_id = parseInt(event.target.id.match(/\d+/)[0])
    const total_estoque = parseInt($(`#${estoque_id}-estoque`).html())
    const qtd_venda = parseFloat($(`#${estoque_id}-qtd_venda`).val())
    const total = total_estoque - qtd_venda

    if(total > 0 || total == 0){
      $(`#${estoque_id}-total`).html(`${total}`)
      return
    }

    $(`#${estoque_id}-qtd_venda`).val(``)
    $(`#${estoque_id}-total`).html(`${total_estoque}`)
  });

  const abrirEstoques = (produto_id, number_tr) => {
    $('#tableBody_estoque').html("")
    localStorage.setItem("produto_id", JSON.stringify(produto_id));

    let produto = getProduto(produto_id)
    if(!produto.controlar_estoque) return

    let estoques = getEstoques(produto_id)
    let qtdProd = $(`#${number_tr}-qtd`).val()
    if(!estoques || !qtdProd) return

    $(".descricaoProd").html(`${produto.descricao.trim()}`)
    $(".qtdProd").html(`${qtdProd}`)

    const produtoEmEstoque = prepararEstoqueParaMovimento(estoques)

    if (produtoEmEstoque) {
      $("#myModal").show()
      return
    }

    alert(`O produto ${produto.descricao.trim()} não possui em estoque!`)
    const $tr = $($(`#${number_tr}-cod_produto`)).closest('tr');
    $tr.remove();
    addProduto()
  }

  const prepararEstoqueParaMovimento = (estoques) =>{
    const produto_id = JSON.parse(localStorage.getItem("produto_id"))
    let table = $('.jsDinamicTable_estoque');
    let body = $('#tableBody_estoque');
    let produtoEmEstoque = false
    body.html("")

    movimentoEstoque = getMovimentoEstoque()
    if(!movimentoEstoque) return

    const estoquesMovimentados = []
    movimentoEstoque.forEach((movimento) => {
      if((movimento.produto_id == parseInt(produto_id))){
        estoquesMovimentados.push(movimento.estoque_id)
      }
    })

    estoques.forEach(estoque => {
      if(!(estoquesMovimentados.includes(estoque.id)) && estoque.estoque_atual_lote == 0) return

      var date = new Date(estoque.created_at);
      produtoEmEstoque = true

      let input = "<input  class='form-control' id='"+ estoque.id +"-qtd_venda' type='text' style='width: 115px;' data-behavior='qtd_venda'>"

      table.append(
        $(
        "<tr id='"+ estoque.id +"' class='operacao-estoque' >"+
          "<td>"+ estoque.lote +"</td>" +
          "<td>"+ `${date.getMonth() + 1}/${date.getFullYear()}` +"</td>" +
          "<td id='"+ estoque.id + "-estoque'>"+ estoque.estoque_atual_lote +"</td>" +
          "<td>" + input +"</td>" +
          "<td id='"+ estoque.id + "-total'>"+ estoque.estoque_atual_lote +"</td>" +
        "</tr>"
        )
      );
    });

    movimentoEstoque.forEach((movimento) => {
      if(!(movimento.produto_id == parseInt(produto_id))) return
      let total = parseInt($(`#${movimento.estoque_id}-estoque`).html())
      let estoque_inicial = total + parseInt(movimento.qtd)

      $(`#${movimento.estoque_id}-estoque`).html(estoque_inicial)
      $(`#${movimento.estoque_id}-qtd_venda`).val(movimento.qtd)
      $(`#${movimento.estoque_id}-total`).html(total)
    });

    return produtoEmEstoque
  }

  const salvarMovimentoEstoque = () => {
    let movimentoEstoques = getMovimentoEstoque()

    if(!qtdSelecionadaIgualBaixa()){
      alert("Quantidade distribuida é diferente do adicionado")
      return
    }

    $('#tableBody_estoque tr').each(function() {
      var qtd = parseFloat($(`#${this.id}-qtd_venda`).val())

      for (let index = 0; index < movimentoEstoques.length; index++) {
        const movimento = movimentoEstoques[index];
        if(movimento.estoque_id == this.id){
          movimentoEstoques.splice(index, 1)
        }
      }

      if(!(qtd > 0)) return

      movimentoEstoque = {
        produto_id: JSON.parse(localStorage.getItem("produto_id")),
        estoque_id: this.id,
        origem: "<%= Estoque::VENDA %>",
        data: new Date,
        qtd: $(`#${this.id}-qtd_venda`).val(),
        estoque_inicial: $(`#${this.id}-estoque`).html(),
        estoque_final: parseFloat($(`#${this.id}-estoque`).html()) - parseFloat($(`#${this.id}-qtd_venda`).val()),
        nota_fiscal_id: "<%= @nota_fiscal.id %>"
      }

      movimentoEstoques.push(movimentoEstoque)
    })

    setMovimentoEstoque(movimentoEstoques)

    let codProdutos = $('[data-behavior~=cod_produto]')
    let qtdProdutos = codProdutos.length
    let trPorduto = codProdutos[qtdProdutos - 1]
    let cod_produto_next = $(`#${trPorduto.id}`).val()

    if(cod_produto_next){
      addProduto()
      return
    }

    $("#myModal").hide()
  }

  const qtdSelecionadaIgualBaixa = () => {
    const qtdSelecinado = $(".qtdProd").html()
    let qtdAdd = 0

    $('#tableBody_estoque tr').each(function() {
      var qtd = $(`#${this.id}-qtd_venda`).val()
      if(qtd) qtdAdd += parseFloat(qtd)
    })

    return qtdSelecinado == qtdAdd
  }

  // =============== Busca de Dados ===============
  const getProduto = (produto_id) =>{
    let produto = null
    $.ajax({
      type: "GET",
      url: `/produtos/${produto_id}.json`,
      async: false,
      success: function(produtoRetornado){
        produto = produtoRetornado
      }
    })

    return produto
  }

  const getEstoques = (produto_id) => {
    let estoques = null
    if(!produto_id) return

    $.ajax({
      type: "GET",
      url: `/estoques.json`,
      async: false,
      data: { produto_id: produto_id },
      success: function(estoquesRetornado){
        estoques = estoquesRetornado
      }
    })

    return estoques
  }

  const getMovimentos = () =>{
    let movimentoEstoques = getMovimentoEstoque()

    $.ajax({
      type: "GET",
      url: `/movimento_estoques.json`,
      data: {nota_fiscal_id: <%= @nota_fiscal.id %>},
      async: false,
      success: function(movimento_estoques){
        let addMovimentoLocal = []

        movimento_estoques.forEach(movimentoBD => {
          let dentrolocal = false

          movimentoEstoques.forEach(movimentoLocal => {
            if(movimentoBD.nota_fiscal_id == movimentoLocal.nota_fiscal_id){
              if(movimentoBD.produto_id == movimentoLocal.produto_id){
                if(movimentoBD.estoque_id == movimentoLocal.estoque_id){
                  dentrolocal = true
                }
              }
            }
          });

          if(!dentrolocal) addMovimentoLocal.push(movimentoBD)
        });

        let movimentos = movimentoEstoques.concat(addMovimentoLocal)
        setMovimentoEstoque(movimentos)
      }
    })
  }

  const buscarMovimentoEstoque = () => {
    let movimentoEstoques = getMovimentoEstoque()
    let nota_fiscal_id = <%= @nota_fiscal.id %>
    let movimentoSaida = []
    let movimentoPermanece = []

    movimentoEstoques.forEach(movimento => {
      if(movimento.nota_fiscal_id == nota_fiscal_id){
        movimentoSaida.push(movimento)
      }else{
        movimentoPermanece.push(movimento)
      }
    });

    setMovimentoEstoque(movimentoPermanece)
    $("#movimentos").val(JSON.stringify(movimentoSaida));
    $(`#new_nota_fiscal_item`).submit()
  }


  function matchCustom(params, data) {
    if ($.trim(params.term) === '') return data
    if (typeof data.text === 'undefined') return null

    if (data.text.indexOf(params.term) > -1) {
      var modifiedData = $.extend({}, data, true);
      modifiedData.text += ' (matched)';
      return modifiedData;
    }

    return null;
  }
</script>
